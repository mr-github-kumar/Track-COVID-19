{"version":3,"sources":["component/infoBox/InfoBox.jsx","component/infoBox/StateInfoBox.jsx","component/chart/LineGraph.jsx","component/table/Table.jsx","component/utility/Util.jsx","component/map/Map.jsx","component/table/StatesTable.jsx","component/nav/NavBar.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["InfoBox","title","color","cases","total","isRed","active","props","Background","backgroundSize","backgroundRepeat","backgroundImage","cursor","width","height","boxShadow","textAlign","padding","info","makeStyles","root","borderRadius","border","cardStyles","Card","className","onClick","CardContent","classes","Typography","gutterBottom","StateInfoBox","availBeds","usedBeds","totalBeds","class","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","countryCode","useState","setData","url","useEffect","a","fetch","then","response","json","result","timeline","fetchData","LineDiv","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","stateInfo","center","zoom","Paper","elevation","TileLayer","attribution","Circle","lat","long","fillColor","fillOpacity","Math","sqrt","confirmed","Popup","name","showDataOnMapForStates","countryInfo","style","flag","showDataOnMap","StatesTable","states","state","stateName","actuals","cumulativeConfirmedCases","Nav","styled","nav","NavBar","App","setCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","hosptialInfo","setHosptialInfo","availableBeds","setAvailableBeds","setUsedBeds","setTotalBeds","totalCases","setTotalCases","recoveredCases","setRecoveredCases","deathsCases","setDeathsCases","dailyTotalCases","setDailyTotalCases","dailyRecoveredCases","setDailyRecoveredCases","dailyDeathsCases","setDailyDeathsCases","statesTableData","setStatesTableData","setStates","setState","counties","setCounties","county","setCounty","stateAbbr","setStateAbbr","statesInfo","setStatesInfo","setStateInfo","allStatesInfo","setAllStatesInfo","setColor","tempStates","m","fips","hospitalInfo","hospitalBeds","getStatesData","iso3","getCountriesData","countryName","region","countryIso","iso","province","todayConfirmed","confirmed_diff","todayDeaths","deaths_diff","todayRecovered","recovered_diff","stateListTable","onCountryChange","e","target","filter","toLowerCase","onStateChange","stateCode","DataForUSA","stateData","tempCounties","countyName","countyInfo","stateHospitalInfo","find","capacity","currentUsageCovid","positive","negative","death","positiveIncrease","negativeIncrease","deathIncrease","onCardClick","caseType","onCountyChange","countyCode","cumulativeNegativeTests","cumulativeDeaths","dropdownStyles","theme","background","alignItems","breakpoints","down","fontSize","fontWeight","between","tableStyles","drop","list","todayCases","Select","variant","onChange","MenuItem","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b54093d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction InfoBox({ title, color, cases, total, active, isRed, ...props }) {\r\n  \r\n  const Background = styled.div({\r\n    backgroundSize: \"cover\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundImage: color,\r\n    cursor: \"pointer\",\r\n    width: \"100%\",\r\n    height:\"100%\",\r\n    boxShadow: \"2px 2px 2px rgba(0, 0, 0, 0.2)\",\r\n    textAlign: \"center\",\r\n    padding:\"5px\",\r\n  });\r\n\r\n  const cardStyles = makeStyles({\r\n    root: {\r\n      width:\"100%\",\r\n      borderRadius: 5,\r\n      padding: \"5px\",\r\n      border:0,\r\n    },\r\n  });\r\n\r\n  const info = cardStyles();\r\n\r\n  return (\r\n    <Card className=\"card\" onClick={props.onClick} >\r\n      <Background>\r\n        <CardContent classes={{ root: info.root, }}>\r\n          <div className=\"card-header\">\r\n            <Typography color=\"textPrimary\" gutterBottom>\r\n              {title}\r\n            </Typography>\r\n          </div>\r\n          <div>\r\n            <h1\r\n              className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}\r\n            >\r\n              {cases}\r\n            </h1>\r\n\r\n            <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n              Toatl: {total}\r\n            </Typography>\r\n          </div>\r\n        </CardContent>\r\n      </Background>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nimport styled from \"@emotion/styled/macro\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction StateInfoBox({ availBeds,color, usedBeds, totalBeds }) {\r\n\r\n  const Background = styled.div({\r\n    backgroundSize: \"cover\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundImage: color,\r\n    cursor: \"pointer\",\r\n    width: \"100%\",\r\n    height:\"100%\",\r\n    boxShadow: \"2px 2px 2px rgba(0, 0, 0, 0.2)\",\r\n    textAlign: \"center\",\r\n    padding:\"5px\",\r\n  });\r\n\r\n  const cardStyles = makeStyles({\r\n    root: {\r\n      width:\"100%\",\r\n      borderRadius: 5,\r\n      padding: \"5px\",\r\n      border:0,\r\n    },\r\n  });\r\n\r\n  const info = cardStyles();\r\n\r\n  return (\r\n    <Card className=\"card\">\r\n      <Background>\r\n        <CardContent classes={{ root: info.root, }}>\r\n          <div class=\"card-header\">\r\n            <Typography color=\"textPrimary\">Hospitalised</Typography>\r\n          </div>\r\n          {/* <Typography className=\"hospCases\" color=\"textPrimary\">\r\n            Available Beds: {availBeds}\r\n          </Typography> */}\r\n          <Typography className=\"hospCases\">\r\n            <h1>{usedBeds}</h1>\r\n          </Typography>\r\n          {/* <Typography className=\"hospCases\" color=\"textSecondary\">\r\n            Total: {totalBeds}\r\n          </Typography> */}\r\n        </CardContent>\r\n      </Background>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default StateInfoBox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport styled from \"@emotion/styled/macro\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, countryCode, color }) {\r\n  const [data, setData] = useState({});\r\n\r\n  const url =\r\n    !countryCode || countryCode === \"worldwide\"\r\n      ? \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n      : `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=120`;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(url)\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          const result =\r\n            !countryCode || countryCode === \"worldwide\" ? data : data.timeline;\r\n          let chartData = buildChartData(result, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  });\r\n\r\n  const LineDiv = styled.div({\r\n    backgroundColor:'red',\r\n    cursor: \"pointer\",\r\n    height: \"270px\",\r\n    padding: \".5rem\",\r\n    width: \"100%\",\r\n    background: \"linear-gradient(#a1c4fd,#c2e9fb)\",\r\n    margin: \"5px 0 0 0\",\r\n    borderRadius:\"5px\",\r\n  });\r\n\r\n  return (\r\n    <LineDiv> \r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: color,\r\n                borderColor: color,\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </LineDiv>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport \"../map/Map.css\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#8A2BE2\",\r\n    rgb: \"rgb(138,43,226)\",\r\n    half_op: \"rgba(138,43,226,0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `${numeral(stat).format(\"0,0\")}` : \"0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      className=\"blinking\"\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nexport const showDataOnMapForStates = (data, casesType = \"cases\") => (\r\n  <Circle\r\n    className=\"blinking\"\r\n    center={[data.lat, data.long]}\r\n    color={casesTypeColors[casesType].hex}\r\n    fillColor={casesTypeColors[casesType].hex}\r\n    fillOpacity={0.4}\r\n    radius={Math.sqrt(data.confirmed) * casesTypeColors[casesType].multiplier}\r\n  >\r\n    <Popup>\r\n      <div className=\"info-container\">\r\n        <div className=\"info-name\">{data.name}</div>\r\n        <hr />\r\n        <div className=\"info-confirmed\">\r\n          Cases: {numeral(data.confirmed).format(\"0,0\")}\r\n        </div>\r\n        <div className=\"info-deaths\">\r\n          Deaths: {numeral(data.deaths).format(\"0,0\")}\r\n        </div>\r\n      </div>\r\n    </Popup>\r\n  </Circle>\r\n);\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap, showDataOnMapForStates } from \"../utility/Util\";\r\nimport { Paper } from \"@material-ui/core\";\r\nfunction Map({ stateInfo, countries, casesType, center, zoom }) {\r\n  return (\r\n    <Paper elevation={24} className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom} className=\"titleLayer\">\r\n        <TileLayer\r\n          url=\"https://api.mapbox.com/styles/v1/kk2210/ckf50x2330fxs19npy9k51ms7/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1Ijoia2syMjEwIiwiYSI6ImNrZjUwdHMwNzBpa3Uycm1xMjg1aWd1dDQifQ.EVSScEdfEu6u81Ww2C7m-Q\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\r\n        />\r\n        {stateInfo.length > 0\r\n          ? showDataOnMapForStates(stateInfo[0], casesType)\r\n          : showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction StatesTable({ states }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {states.map((state) => (\r\n        <tr>\r\n          <td>{state.stateName}</td>\r\n          <td>\r\n            <strong>{numeral(state.actuals.cumulativeConfirmedCases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatesTable;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n/* import Burger from \"./BurgerMenu\"; */\r\n\r\nconst Nav = styled.nav`\r\n  ${\"\" /* position: fixed; */}\r\n  ${\"\" /*  width: 100%; */}\r\n  height:100%;\r\n  border-bottom: 2px solid #f1f1f1;\r\n  padding: 0 20px;\r\n  background: linear-gradient(#48c6ef, #6f86d6);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 200;\r\n\r\n  h1 {\r\n    text-align: center;\r\n  }\r\n\r\n  .navbar__logo {\r\n    display: flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n    padding: 1rem;\r\n  }\r\n\r\n  h3 {\r\n    padding-left: 10px;\r\n  }\r\n`;\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <Nav>\r\n      <div className=\"navbar__logo\">\r\n        <h1>COVID-19</h1>\r\n        <h3>Live</h3>\r\n      </div>\r\n      {/* <Burger /> */}\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { MenuItem, Paper, Select, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./component/infoBox/InfoBox\";\nimport StateInfoBox from \"./component/infoBox/StateInfoBox\";\nimport LineGraph from \"./component/chart/LineGraph\";\nimport Table from \"./component/table/Table\";\nimport { sortData, prettyPrintStat } from \"./component/utility/Util\";\nimport numeral from \"numeral\";\nimport Map from \"./component/map/Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport StatesTable from \"./component/table/StatesTable\";\nimport NavBar from \"./component/nav/NavBar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst App = () => {\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 48.4637, lng: 3.436 });\n  const [hosptialInfo, setHosptialInfo] = useState(false);\n  const [availableBeds, setAvailableBeds] = useState(0);\n  const [usedBeds, setUsedBeds] = useState(0);\n  const [totalBeds, setTotalBeds] = useState(0);\n  const [totalCases, setTotalCases] = useState(0);\n  const [recoveredCases, setRecoveredCases] = useState(0);\n  const [deathsCases, setDeathsCases] = useState(0);\n  const [dailyTotalCases, setDailyTotalCases] = useState(\"\");\n  const [dailyRecoveredCases, setDailyRecoveredCases] = useState(\"\");\n  const [dailyDeathsCases, setDailyDeathsCases] = useState(\"\");\n  const [statesTableData, setStatesTableData] = useState([]);\n\n  /* States Informations */\n  const [states, setStates] = useState([]);\n  const [state, setState] = useState(\"States\");\n  const [counties, setCounties] = useState([]);\n  const [county, setCounty] = useState(\"Counties\");\n  const [stateAbbr, setStateAbbr] = useState([]);\n\n  const [statesInfo, setStatesInfo] = useState([]);\n  const [stateInfo, setStateInfo] = useState([]);\n  const [allStatesInfo, setAllStatesInfo] = useState([]);\n  const [color, setColor] = useState(\"rgba(255,0,255,0.2)\");\n\n  useEffect(() => {\n    const getStatesData = async () => {\n      await fetch(\n        \"https://data.covidactnow.org/latest/us/states.STRONG_INTERVENTION.json\"\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          const tempStates = data.map((m) => ({\n            name: m.stateName,\n            value: m.fips,\n            hospitalInfo: m.actuals.hospitalBeds,\n          }));\n          let sortedData = sortData(data);\n          setStatesTableData(sortedData);\n          setStates(tempStates);\n        });\n    };\n    getStatesData();\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso3,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://covid-api.com/api/reports/\")\n      .then((response) => response.json())\n      .then((data) => {\n        const tempStates = data.data.map((m) => ({\n          countryName: m.region.name,\n          countryIso: m.region.iso,\n          name: m.region.province,\n          lat: m.region.lat,\n          long: m.region.long,\n          confirmed: m.confirmed,\n          deaths: m.deaths,\n          recovered: m.recovered,\n          todayConfirmed: m.confirmed_diff,\n          todayDeaths: m.deaths_diff,\n          todayRecovered: m.recovered_diff,\n        }));\n        setAllStatesInfo(tempStates);\n      });\n  }, []);\n\n  //on selecting country\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setState(\"States\");\n    setCounties([]);\n    setStatesInfo([]);\n    setStateInfo([]);\n    setCounty(\"Counties\");\n    setTotalBeds(0);\n    setUsedBeds(0);\n    setAvailableBeds(0);\n\n    if (countryCode === \"USA\") {\n      setHosptialInfo(true);\n      await fetch(\n        \"https://worldpopulationreview.com/static/states/name-abbr.json\"\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setStateAbbr(data);\n        });\n    } else setHosptialInfo(false);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode === \"worldwide\")\n          setMapCenter({ lat: 48.4637, lng: 3.436 });\n        else\n          setMapCenter({\n            lat: data.countryInfo.lat,\n            lng: data.countryInfo.long,\n          });\n      });\n\n    setStatesInfo(\n      allStatesInfo.filter(\n        (x) =>\n          x.countryIso.toLowerCase() === countryCode.toLowerCase() &&\n          x.name !== \"\"\n      )\n    );\n  };\n\n  //on selecting states\n  const onStateChange = async (e) => {\n    const stateCode = e.target.value;\n    setState(stateCode);\n    setStateInfo(\n      statesInfo.filter((x) => x.name.toLowerCase() === stateCode.toLowerCase())\n    );\n\n    if (stateCode !== \"States\") {\n      if (hosptialInfo) {\n        DataForUSA(stateCode);\n        setMapCenter({\n          lat: statesInfo.filter(\n            (x) => x.name.toLowerCase() === stateCode.toLowerCase()\n          )[0].lat,\n          lng: statesInfo.filter(\n            (x) => x.name.toLowerCase() === stateCode.toLowerCase()\n          )[0].long,\n        });\n      } else {\n        const stateData = allStatesInfo.filter(\n          (x) => x.countryIso === country && x.name === stateCode\n        )[0];\n        setTotalCases(stateData.confirmed ? stateData.confirmed : 0);\n        setRecoveredCases(stateData.recovered ? stateData.recovered : 0);\n        setDeathsCases(stateData.deaths ? stateData.deaths : 0);\n        setDailyTotalCases(\n          stateData.todayConfirmed ? stateData.todayConfirmed : 0\n        );\n        setDailyRecoveredCases(\n          stateData.todayRecovered ? stateData.todayRecovered : 0\n        );\n        setDailyDeathsCases(stateData.todayDeaths ? stateData.todayDeaths : 0);\n        setMapCenter({\n          lat: stateData.lat,\n          lng: stateData.long,\n        });\n      }\n    } else {\n      setMapCenter({\n        lat: countryInfo.countryInfo.lat,\n        lng: countryInfo.countryInfo.long,\n      });\n    }\n  };\n\n  const DataForUSA = async (stateCode) => {\n    await fetch(\n      \"https://data.covidactnow.org/latest/us/counties.NO_INTERVENTION.json\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const tempCounties = data.map((m) => ({\n          stateName: m.stateName,\n          name: m.countyName,\n          value: m.fips,\n          countyInfo: m.actuals,\n        }));\n        setCounties(\n          tempCounties.filter(\n            (x) => x.stateName.toLowerCase() === stateCode.toLowerCase()\n          )\n        );\n      });\n\n    setCounty(\"Counties\");\n    const stateHospitalInfo = states.find(\n      (x) => x.name.toLowerCase() === stateCode.toLowerCase()\n    );\n    if (stateHospitalInfo) {\n      setTotalBeds(\n        stateHospitalInfo.hospitalInfo.capacity\n          ? stateHospitalInfo.hospitalInfo.capacity\n          : 0\n      );\n      setUsedBeds(\n        stateHospitalInfo.hospitalInfo.currentUsageCovid\n          ? stateHospitalInfo.hospitalInfo.currentUsageCovid\n          : 0\n      );\n      setAvailableBeds(\n        (stateHospitalInfo.hospitalInfo.capacity\n          ? stateHospitalInfo.hospitalInfo.capacity\n          : 0) -\n          (stateHospitalInfo.hospitalInfo.currentUsageCovid\n            ? stateHospitalInfo.hospitalInfo.currentUsageCovid\n            : 0)\n      );\n    }\n\n    fetch(\n      `https://api.covidtracking.com/v1/states/${stateAbbr[stateCode]}/current.json`\n    )\n      .then((response) => response.json())\n      .then((stateInfo) => {\n        setTotalCases(stateInfo.positive ? stateInfo.positive : 0);\n        setRecoveredCases(stateInfo.negative ? stateInfo.negative : 0);\n        setDeathsCases(stateInfo.death ? stateInfo.death : 0);\n        setDailyTotalCases(\n          stateInfo.positiveIncrease ? stateInfo.positiveIncrease : 0\n        );\n        setDailyRecoveredCases(\n          stateInfo.negativeIncrease ? stateInfo.negativeIncrease : 0\n        );\n        setDailyDeathsCases(\n          stateInfo.deathIncrease ? stateInfo.deathIncrease : 0\n        );\n      });\n  };\n\n  const onCardClick = (caseType) => () => {\n    setCasesType(\"cases\");\n    setColor(\"rgba(255,0,255,0.5)\");\n\n    if (caseType === \"deaths\") {\n      setCasesType(\"deaths\");\n      setColor(\"rgba(255,140,0,0.8)\");\n    } else if (caseType === \"recovered\") {\n      setCasesType(\"recovered\");\n      setColor(\"rgba(124,252,0,0.6)\");\n    }\n  };\n\n  const onCountyChange = async (e) => {\n    const countyCode = e.target.value;\n    const county = counties.find(\n      (x) => x.name.toLowerCase() === countyCode.toLowerCase()\n    );\n    setCounty(county ? county.name : \"Counties\");\n    if (county && county !== \"Counties\") {\n      setTotalBeds(\n        county.countyInfo.hospitalBeds.capacity\n          ? county.countyInfo.hospitalBeds.capacity\n          : 0\n      );\n      setUsedBeds(\n        county.countyInfo.hospitalBeds.currentUsageCovid\n          ? county.countyInfo.hospitalBeds.currentUsageCovid\n          : 0\n      );\n      setAvailableBeds(\n        (county.countyInfo.hospitalBeds.capacity\n          ? county.countyInfo.hospitalBeds.capacity\n          : 0) -\n          (county.countyInfo.hospitalBeds.currentUsageCovid\n            ? county.countyInfo.hospitalBeds.currentUsageCovid\n            : 0)\n      );\n      setTotalCases(\n        county.countyInfo.cumulativeConfirmedCases\n          ? county.countyInfo.cumulativeConfirmedCases\n          : 0\n      );\n      setRecoveredCases(\n        county.countyInfo.cumulativeNegativeTests\n          ? county.countyInfo.cumulativeNegativeTests\n          : 0\n      );\n      setDeathsCases(\n        county.countyInfo.cumulativeDeaths\n          ? county.countyInfo.cumulativeDeaths\n          : 0\n      );\n      setDailyTotalCases(\"Not Available\");\n      setDailyRecoveredCases(\"Not Available\");\n      setDailyDeathsCases(\"Not Available\");\n    }\n  };\n\n  let stateListTable;\n  if (hosptialInfo) {\n    stateListTable = (\n      <CardContent>\n        <h3>Total Cases by States</h3>\n        <StatesTable states={statesTableData} />\n      </CardContent>\n    );\n  } else {\n    stateListTable = (\n      <div>\n        <h3>Live Cases by Country</h3>\n        <Table countries={tableData} />\n      </div>\n    );\n  }\n\n  const dropdownStyles = makeStyles((theme) => {\n    return {\n      root: {\n        background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n        borderRadius: 3,\n        border: 0,\n        color: \"black\",\n        width: \"160px\",\n        height: \"32px\",\n        padding: \"0 0 0 16px\",\n        boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n        display: \"flex\",\n        alignItems: \"center\",\n        [theme.breakpoints.down(600)]: {\n          width: \"55px\",\n          fontSize: \"13px\",\n          padding: \"0 0 0 5px\",\n          fontWeight: \"500\", \n          alignItems: \"space-between\",\n        },\n\n        [theme.breakpoints.between('sm', 'md')]: {\n          width: \"70px\",\n          fontSize: \"15px\",\n          padding: \"0 0 0 10px\",\n          fontWeight: \"600\", \n          alignItems: \"space-between\",\n        },\n      },\n    };\n  });\n\n  const tableStyles = makeStyles({\n    root: {\n      background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n      width:\"100%\",\n      borderRadius: 5,\n      color: \"black\",\n      padding: \"5px\",\n      border:0,\n    },\n  });\n\n  const drop = dropdownStyles();\n  const list = tableStyles();\n   \n  return (\n    <div className=\"app\">\n      <div className=\"app-header\">\n        <NavBar />\n      </div>\n      <div className=\"app-background\">\n        <div className=\"app-body\">\n          <div className=\"app-infobox\">\n              <InfoBox\n                onClick={onCardClick(\"Coronavirus Cases\")}\n                title=\"Infected Cases\"\n                color=\"linear-gradient(45deg, #ab47bc, #007bff)\"\n                isRed\n                active={casesType === \"cases\"}\n                cases={prettyPrintStat(\n                  state !== \"States\" ? dailyTotalCases : countryInfo.todayCases\n                )}\n                total={numeral(\n                  state !== \"States\" ? totalCases : countryInfo.cases\n                ).format(\"0,0\")}\n              />\n              <InfoBox\n                onClick={onCardClick(\"recovered\")}\n                title=\"Recovered\"\n                color=\"linear-gradient(45deg, #43a047, #b9cb20)\"\n                active={casesType === \"recovered\"}\n                cases={prettyPrintStat(\n                  state !== \"States\"\n                    ? dailyRecoveredCases\n                    : countryInfo.todayRecovered\n                )}\n                total={numeral(\n                  state !== \"States\" ? recoveredCases : countryInfo.recovered\n                ).format(\"0,0\")}\n              />\n              <InfoBox\n                onClick={onCardClick(\"deaths\")}\n                title=\"Deaths\"\n                color=\"linear-gradient(45deg, #ee0979, #fba200)\"\n                isRed\n                active={casesType === \"deaths\"}\n                cases={prettyPrintStat(\n                  state !== \"States\" ? dailyDeathsCases : countryInfo.todayDeaths\n                )}\n                total={numeral(\n                  state !== \"States\" ? deathsCases : countryInfo.deaths\n                ).format(\"0,0\")}\n              />\n              <StateInfoBox\n                availBeds={availableBeds}\n                usedBeds={usedBeds}\n              totalBeds={totalBeds}\n              color=\"linear-gradient(45deg, #ab47bc, #007bff)\"\n              />\n            </div>\n          <div className=\"app-center\">\n              <div className=\"app-menu\">\n                <Select\n                  className=\"app-menu-dropdown buttonStyle\"\n                  variant=\"outlined\"\n                  value={country}\n                  onChange={onCountryChange}\n                  classes={{\n                    root: drop.root, // class name, e.g. `classes-nesting-root-x`\n                  }}\n                >\n                  <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                  {countries.map((country) => (\n                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                  ))}\n                </Select>\n                <Select\n                  disabled={statesInfo.length <= 0}\n                  className=\"app__menu--Dropdown buttonStyle\"\n                  variant=\"outlined\"\n                  onChange={onStateChange}\n                  value={state}\n                  classes={{\n                    root: drop.root, // class name, e.g. `classes-nesting-root-x`\n                  }}\n                >\n                  <MenuItem value=\"States\">States</MenuItem>\n                  {statesInfo.map((m) => (\n                    <MenuItem value={m.name}>{m.name}</MenuItem>\n                  ))}\n                </Select>\n                <Select\n                  disabled={counties.length <= 0}\n                  className=\"app__menu--Dropdown buttonStyle\"\n                  variant=\"outlined\"\n                  onChange={onCountyChange}\n                  value={county}\n                  classes={{\n                    root: drop.root, // class name, e.g. `classes-nesting-root-x`\n                  }}\n                >\n                  <MenuItem value=\"Counties\">Counties</MenuItem>\n                  {counties.map((m) => (\n                    <MenuItem value={m.name}>{m.name}</MenuItem>\n                  ))}\n                </Select>\n              </div>\n              <Paper elevation={24} className=\"app-map\">\n                <Map\n                  stateInfo={stateInfo}\n                  countries={\n                    !country || country === \"worldwide\"\n                      ? mapCountries\n                      : mapCountries.filter(\n                          (x) => x.countryInfo.iso3 === country\n                        )\n                  }\n                  casesType={casesType}\n                  center={mapCenter}\n                  zoom={country === \"worldwide\" ? 2 : 4}\n                />\n              </Paper>\n          </div>\n          <div className=\"app-right\">\n            <div className=\"app-table\">    \n              <Paper classes={{ root: list.root, }}\n              elevation={24}>\n                {stateListTable}\n              </Paper>  \n            </div>\n            <div className=\"app-chart\">\n              <Paper classes={{ root: list.root, }}\n              elevation={24}>\n                <h3>Trends for last 120 days</h3>\n                <LineGraph\n                  className=\"graphChartsCard\"\n                  casesType={casesType}\n                  countryCode={country}\n                  color={color}\n                />\n              </Paper>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}